{
  "0": {
    "id": "0",
    "title": "Introduction",
    "content": "Authoring Developer DocumentationOnce you have integrated the doc-generator with your project,writing docs is easy. Simply use standard markdown to create your content. You can use github’s built-in markdown tools to preview the content and in addition,you have an automatic preview running for each commit inside pull requests.For each markdown file you want to appear in the documentation, add the followingheader:---layout: defaulttitle: Example titlepagename: examplelang: en---# Page titleNormal markdown content follows...That’s it - now this page can be added to your site’s table of contents, and will be formatted as well as including in the search.Multiple languagesThe documentation generator supports multiple languages (i18n) support via polyglot.Language processYou can now author all your content in the default language, specified by the default_lang setting in the configuration (normally english). Then, as a post process, author the additional languages. If your english markdown page looks like this:---layout: defaulttitle: Example titlepagename: examplelang: en---# Page titleNormal markdown content follows...then your Swedish translation should look like this:---layout: defaulttitle: Exempel-titelpagename: examplelang: sv---# SidöverskriftNormalt markdown-innehåll följer...                    Common Fields: Note how the pagename needs to be the same for both pages and how we have added lang: sv in order to specify that this is the swedish version.    If a language is missing a page, it will use the default_lang version of that page.All content is separated out into separate language areas, to make it easy to handle translation.",
    "url": "/tk-doc-generator/19bd79d8/",
    "relUrl": "/19bd79d8/"
  },
  "1": {
    "id": "1",
    "title": "Figures and Diagrams",
    "content": "Handling figures, screenshots and diagramsWhen including images, figures, screenshots and diagrams, follow these guidelines:Screenshots  Screenshots should be 144dpi and stored in png format  Post processing should be kept to a minimum  We are not translating any graphics, so text should be kept to a minimum.  If possible, screenshot an entire window rather than cropping the image          Use CMD+SHIFT+4 on the mac for easy screenshots of windows      Diagrams and figures  Use draw.io to author diagrams.  The source file should be saved next to the image in github.  Open sans or similar should be used for text.  We are not translating any images, so text should be kept to a minimum.  Exported images should be 144dpi and stored in png format.  Graphics should be functional in style, typically using grayscales only.Captioning FiguresUse the figure include when extended formatting or captioning of an image is necessary:    An example figure.{% include figure src=&quot;/tk-doc-generator/images/landing-page/dev_icon.png&quot; caption=&quot;An example figure.&quot; width=&quot;100px&quot; %}Supported variables:  src: The path to the image  caption: An optional image caption.  width: An optional width that will be appended to the &amp;lt;img&amp;gt; element’s style.  height: An optional height that will be appended to the &amp;lt;img&amp;gt; element’s style.  style: An optional value for the &amp;lt;img&amp;gt; element’s style.  dropshadow: An optional boolean that disables the &amp;lt;img&amp;gt; element’s box-shadow when set to false.  Default behavior is true.",
    "url": "/tk-doc-generator/e68c34ca/",
    "relUrl": "/e68c34ca/"
  },
  "2": {
    "id": "2",
    "title": "Content Structure",
    "content": "How to organize markdown files on diskMarkdown files should be organized by language and then by their position in the table of contents.The top folder structure should always be the language:/docs  |- en  |- jp  |- ko  |- all_langs   - _data  All english documentation should be in the en folder.  All japanese documentation should be in the jp folder.  All korean documentation should be in the ko folder.  If you have content that is shared across languages (such as pdfs or zips for example), create an all_langs folder and organize it there.  Special TOC and landing page data is stored inside the _data folder.Inside the language folder (e.g.  en), items should be organized as they are in the table of contents. Images should be stored in an images folder at the same level as the page they are used by.  If mulitple pages at that level use images, you should organize the images folder with subdirectories for each page./root-folder  |- index.md  |- shotgun.md  |- shotgun  |     - event-daemon.md  |- images  |    |- toolkit  |     - shotgun   - toolkit.md",
    "url": "/tk-doc-generator/14a1bed4/",
    "relUrl": "/14a1bed4/"
  },
  "3": {
    "id": "3",
    "title": "Overview",
    "content": "",
    "url": "/tk-doc-generator/",
    "relUrl": "/"
  },
  "4": {
    "id": "4",
    "title": "Integrating the Doc Generator",
    "content": "Integrating the Doc Generator with your repositoryThis repository makes it easy to generate documentation for ShotGrid Ecosystem and Toolkit related repositories.What does the repo do?Integrate this repository as a submodule in a Toolkit App or other ShotGrid App that benefits and it will:  Convert any markdown in the /docs folder into multi-language html.  Provide a consistent look and feel to build output.  Convert any rst/sphinx files in the /docs folder into multi-language html.  Automatically build and deploy documentation that is pushed to master.  Automatically build a full site preview for each commit in a pull request. The previews are stored in an AWS S3 bucket of your choosing.  Allow you to run local (docker based) previews.  Allow you to generate a full reference collection site, where sphinx/rstdocs from multiple repositories are collected and generated as a single release.Is it difficult to set up?We recommend a devops or developer to set up the documentation intially. Once set up, it is very easy to author and managethe documentation. For the setup phase, you need a basic understanding of git, github, CI (travis especially) and AWS.Tech info  Sphinx is used to convert rst into markdown  Jekyll is used to convert markdown into a html website  SG just-the-docs is the jekyll theme used to render the site.  SG sphinx-markdown-builder is used to convert sphinx code into markdown.Setting up doc generationIn order to use it for your repository, you need the following:  Documentation (in markdown or rst form) located in a /docs folder.  Add this repository as a submodule of your repo in the folder /tk-doc-generator.  An AWS S3 bucket set up for public web access if you want PR based previews.  A location to deploy your target website. We recommend github pages and this is what the examples are based on.  Travis for CI. For more information about how to set this up,see the section below.Configuration fileThe doc generator comes with a default jekyll configuration file. If you wish to override any settings, you can add a jekyll_config.yml file into the root level of your repository.Integrating with Travis CIOnce you have set up this repository as a submodule to your code, setting up travis CI or adding it to an existing CI is easy.Using an exampleIf you prefer to work off an example rather than setting things up from scratch, we recommend making a clone of the ShotGrid developer site as a starting point.Environment variablesThe following environment variables should be defined in the travis .travis.yml file:  DOC_URL - The target url where released docs will go, e.g. https://developer.shotgridsoftware.com.  DOC_PATH - The path where the released docs will go, e.g. /dev-docs.  S3_BUCKET - the name of a publicly accessible S3 bucket, in website hosting mode, e.g. mybucket.  S3_WEB_URL - the website url where the bucket can be accessed, e.g. http://mybucket.s3-website.eu-west-2.amazonaws.com.Travis secret preferencesThe following (secret) environment variables should be defined in the travis preferences:  AWS_S3_ACCESS_KEY - AWS access key with permissions to put new items into the S3_BUCKET.  AWS_S3_ACCESS_TOKEN - AWS access token with permissions to put new items into the S3_BUCKET.  GITHUB_TOKEN - Github access token used to create a comment on the PR with a link to the built docs.Folder locations  Your documentation needs to be located in /docs.  The build output will be generated in /_build (see travis example below).Setting up a github access tokenIn order for the CI to deploy to the gh-pages branch, you need to provide it with an access tokenso that it can use github on your behalf. You can generate one by going to your personal settings, developer, access tokens. Make sure you restrict the access token to only have access to public repos:Example .travis.yml fileThe following travis file illustrates how to integrate:language: pythonglobal:    - DOC_URL=https://developer.shotgridsoftware.com    - DOC_PATH=/tk-doc-generator    - S3_BUCKET=my-preview-bucket    - S3_WEB_URL=http://my-preview-bucket.s3-website.my-region.amazonaws.compython:    - &quot;2.7&quot;cache:  pip: true  directories:     # manually cache ruby dependencies     - $TRAVIS_BUILD_DIR/tk-doc-generator/vendor/bundlebefore_install:  # required dependency for sphinx  - sudo apt-get install -y pandocinstall:  #   # install pyside - from https://stackoverflow.com/questions/24489588  - sudo apt-get install libqt4-dev  - pip install PySide --no-index --find-links https://parkin.github.io/python-wheelhouse/;  - python ~/virtualenv/python${TRAVIS_PYTHON_VERSION}/bin/pyside_postinstall.py -install  #  # jekyll dependencies  - bundle install --gemfile=./tk-doc-generator/Gemfile --deployment  #  # sphinx dependnecies  - pip install -r ./tk-doc-generator/requirements.txtscript:  # script that runs the CI and handles S3 previews  - python ./tk-doc-generator/travis-generate-docs.pydeploy:  # When commiting to master, auto-deploy to github-pages  # This will copy the contents of the _build folder to gh-pages branch and push- provider: pages  local-dir: ./_build  target-branch: gh-pages  skip-cleanup: true  github-token: $GITHUB_TOKEN  on:    # only do this when on the master branch    branch: masterRunning locallyIn order to run the setup manually, you need docker installed.Simply use the /preview_docs.sh script located in the root folder ofthis repo in order to build the documents.Github ShieldsWe recommend using the following shield to highlight that there are documentationbuild using the tk-doc-generator:[![Doc Generator](https://img.shields.io/badge/Built%20With-SG%20Doc%20Generator-blue.svg)](http://github.com/shotgunsoftware/tk-doc-generator)Configuring SearchThe documentation system supports integration with Google Custom Search. This makes it easy to integrate site specific search results. This is disabled by default - in order to enable it, set up a google custom search profile and then add its search engine id into the configuration:# add a google custom search box# (see https://developers.google.com/custom-search/docs/element)google_custom_search_id: your_search_key_here",
    "url": "/tk-doc-generator/53726823/",
    "relUrl": "/53726823/"
  },
  "5": {
    "id": "5",
    "title": "Custom Landing Page",
    "content": "Creating a custom landing pageThe documenation system supports the notion of a custom landing page. The page consists of several different files:      A markdown file (typically index.md) with its pagename setting set to index.This file should be using the landing_page layout. For an example, seethe tk-doc-generator landing page.        A file _data/landing_page.yml to describe the content. For an example, see the tk-doc-generator landing page.        A file _data/en/landing_page_text.yml containing the english content. For an example, see the landing page for this documentation.        Additional languages are added by adding additional yaml files following the file _data/XXX/landing_page_text.yml, where XXX represents the language.        Images should be square and 144dpi resolution or more.  ",
    "url": "/tk-doc-generator/125e05f9/",
    "relUrl": "/125e05f9/"
  },
  "6": {
    "id": "6",
    "title": "Configuring Languages",
    "content": "Configuring multiple languagesThe doc generator makes it easy to enable multi-language workflows. In order to set things up, follow these steps:Add languages to the configurationAdd a jekyll_config.yml file to your repository. Add the following section to the file:# i18n configuration for all languages shotgun supportslanguages: [&quot;en&quot;, &quot;ko&quot;, &quot;ja&quot;, &quot;zh_CN&quot;]lang_vars: [&quot;English&quot;, &quot;한국어&quot;, &quot;日本語&quot;, &quot;简体中文&quot;]default_lang: &quot;en&quot;  Add the relevant i18n language codes to the languages list.  For each language, add a human readable name in the lang_vars name.  specify a default_lang (normally en)Document disk layoutFor documentation structure, see the file structure documentation.",
    "url": "/tk-doc-generator/f1564ec9/",
    "relUrl": "/f1564ec9/"
  },
  "7": {
    "id": "7",
    "title": "Markdown syntax",
    "content": "Markdown Formatting CookbookFor documentation, use standard github markdown.While authoring documentation, you can use the github markdown preview functionality that exists in the github web ui.Page headersEvery page that should be processed by the system needs to have a header on the following form:---layout: defaulttitle: My Wonderful Pagepagename: my-wonderful-pagelang: en---PagenamesThe slug key pagename is used to provide a unique name for each page. This pagename is used when processing the table of contents to find the page each entry corresponds to. Additionally, the pagename is used when generating each page’s URL UID.A page’s pagename is only ever used internally, and does not necessarily need to make sense to an end-user.  Instead it should be descriptive to the documentation maintainer(s).                    Pagenames should be unique and static: Because the pagename is used as an identifier for the page in the table of contents, pagenames must be unique.  Additionally, since the pagename is used to generate the page’s UID, changing the pagename will change the UID and in turn the URL, meaning previously distributed or bookmarked links will no longer work.  For this reason, it is not advisable to change a pagename after the page has gone live.    Language SupportThe lang: en defines what language the page has been written in and should follow i18n language codes.Special SyntaxSeveral special additions exists that can be used to help build great documentation.Info BoxTo higlight especially important things, use an info box:                    Super Important: Some things are really worth pointing out.    {% include info title=&quot;Super Important&quot; content=&quot;Some things are really worth pointing out.&quot; %}Warning BoxTo warn the reader about things, use a warning box:                    Scary stuff ahead: Beware of the quick brown fox jumping over the lazy dog.    {% include warning title=&quot;Scary stuff ahead&quot; content=&quot;Beware of the quick brown fox jumping over the lazy dog.&quot; %}Enternal linksPlease note that all external links will be automatically decorated:  google",
    "url": "/tk-doc-generator/5ce7545e/",
    "relUrl": "/5ce7545e/"
  },
  "8": {
    "id": "8",
    "title": "Nesting",
    "content": "Nesting PagesThe table of contents supports nesting pages to a limited depth.  Each caption can have 3 levels of nested children beneath it.Pages with children will be rendered with an arrow next to them in the table of contents, and when selected they will “expand”, showing their children below them.",
    "url": "/tk-doc-generator/3ae6f906/",
    "relUrl": "/3ae6f906/"
  },
  "9": {
    "id": "9",
    "title": "Page URLs",
    "content": "Page URLsPage URLs are generated automatically at build time based on each page’s pagename.  This allows URLs to remain static and independent of content, even if the title or purpose of a particular page changes.Page Titles in URLsTo make URLs more human-readable, we append the page titles to the URL like so: https://mydocumentation.mysite.com/78b64024/?title=Page+URLs.The value included there does not change which page is requested – it is only used to make the URL more readable.  This means that changing a page’s title will not break existing links, even if they include the old page title.  The page titles are appended in this manner to internal links and links in the table of contents automatically.When sending a URL to someone else or bookmarking a link you can change the URL after the ? in any way you like, or remove that portion of the URL altogether; this will not change which page the URL points to.",
    "url": "/tk-doc-generator/78b64024/",
    "relUrl": "/78b64024/"
  },
  "10": {
    "id": "10",
    "title": "Local Preview",
    "content": "Previewing your changes locallyWhenever you create a pull request, a CI preview is generated automatically for every commit.If you want to run this preview and build process automatically, you can use Docker to executethat same process. Simply execute the preview_docs script on your local command. This will use docker to create a container, downkload all relevant dependencies and build the documentation.",
    "url": "/tk-doc-generator/c8bab2ae/",
    "relUrl": "/c8bab2ae/"
  },
  "11": {
    "id": "11",
    "title": "Technical Details",
    "content": "Technical DetailsThis document covers technical details around the internals of the repository and how to maintain it.Updating the theme versionIn order to update the theme version, you need to rebuild the Gemfile.lock to matchthe latest versions of things:  Make the necessary changes to the Gemfile  Run scripts/docker-bash.sh to get a bash terminal inside the docker container.          You’ll need docker installed for this.        Inside docker bash, execute          cd tk-doc-generator      bundle install -deployment      A new Gemfile.lock will be generated in the container.        Replace your Gemfile.lock file with the one generated by the container.",
    "url": "/tk-doc-generator/ab47ab26/",
    "relUrl": "/ab47ab26/"
  },
  "12": {
    "id": "12",
    "title": "Table of contents",
    "content": "Managing a table of contentsTo modify the table of contents, you need to change two files:  A docs/_data/toc.yml table of contents structure file.  A docs/_data/en/toc_text.yml file containing localized strings. In this case, the path points at the english strings. The entries added to this file will normally be translated into additional languages as a secondary activity. As an example, the japaneseversion of this document would be docs/_data/ja/toc_text.yml.                    Moving and renaming pages: The location of a page in the table of contents, and the page’s title (specified in the slug) determine the page’s location and name.  Renaming or moving a page is accomplished by changing these values, and not it’s pagename, as the pagename is only used internally.    The toc fileThe docs/_data/toc.yml defines the structure of the table of contents.For example, it may look like this:- caption: authoring  children:  - page: authoring  - page: authoring-markdown    children:    - text: markdown-cheatsheet      url: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet  - page: authoring-figures  - page: authoring-toc    children:    - page: toc-file-structure      children:      - page: toc-nesting  - page: authoring-landing-page  - page: authoring-preview- caption: setting-up  children:  - page: installation-integrating  - page: installation-languages- caption: developing  children:  - page: developing-tech-details  The caption nodes will be displayed as blue, nonclickable headings in the TOC.  Each caption node has a list of children in a children key.  Items in this children list can either be other documentation pages or extenrnal links.  Documentation pages are referenced by their pagename, e.g. page: authoring-markdown  External links have a text and a url key to define where they point.TranslationBoth caption and text elements are strings that potentially need to be translated into multiple languagesand are therefore stored in a special file. This file should be located in docs/_data/en/toc_text.yml, where enis a language code. This file should contain an entry for each caption and text entry in the TOC. For example,for the TOC shown above, the following docs/_data/en/toc_text.yml would be needed:authoring: Authoring docsmarkdown-cheatsheet: Markdown Formatsetting-up: Installationdeveloping: Developing tk-doc-generator",
    "url": "/tk-doc-generator/a0c60e02/",
    "relUrl": "/a0c60e02/"
  }
}
